#!/bin/bash
#SBATCH -J ragout
#SBATCH -p htcondor
#SBATCH --mem=10gb
#SBATCH --time=05:00:00
#SBATCH --cpus-per-task=12
#SBATCH -o %x.log

# Initialize script
init="s-latissima-genome/script_init.sh"
if [[ -a "$init" ]]; then source "$init"; else { echo "Init err"; exit 1; }; fi

# Script environment variables
hal2maf_script="hal2maf.sbatch"
R_mod_file="modules_for_Rscript.txt"
r_script1="generate_rcp.R"
r_script2="${job_name}.R"
# Default Cactus output directory and seqFile name
cactus_dir="cactus-steps-output"
seqFile="s_lat_alignment.txt"
# Default prefix for Ragout output
ragout_prefix="ragout-out"

# Help message
if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]
then
  echo "\
Runs Ragout in large assembly mode on HAL file generated by Cactus.
Usage: sbatch ${job_name}.sbatch <seqFile> <cactus_dir> [ragout_prefix]

Requires: Ragout (https://github.com/fenderglass/Ragout)"
  exit 0
fi

# Prepend scripts directory to variables
hal2maf_script="${scripts_dir}${hal2maf_script}"
R_mod_file="${scripts_dir}${R_mod_file}"
r_script1="${scripts_dir}${r_script1}"
r_script2="${scripts_dir}${r_script2}"
seqFile="${scripts_dir}${seqFile}"

# Input
# Cactus seqFile
[[ -n "$1" ]] && seqFile="$1"
# Cactus output directory
[[ -n "$2" ]] && cactus_dir="$2"
# Ragout prefix
[[ -n "$3" ]] && ragout_prefix="$3"
# Cactus prefix
cactus_prefix="$(basename "${seqFile%.*}")"

# Convert Cactus HAL output to MAF
# Parse HAL and MAF paths from inputs
maf="${cactus_prefix}.maf"
hal="${cactus_dir}/${cactus_prefix}.hal"
# Check for existing MAF, if not found generate MAF from HAL
if [[ -f "$maf" ]]
then
  echo "MAF ($maf) found."
else
  echo "MAF ($maf) not found. Converting HAL to MAF."
  [[ -f "$hal" ]] || { echo "Error: HAL ($hal) not found."; exit 1; }
  cmd="bash $hal2maf_script $hal $maf"
  echo "$cmd"
  $cmd
fi
echo

# Generate Ragout recipe file
# Load R modules
module purge
$load_R_mods
# Run Rscript
echo "Generating recipe file for Ragout."
cmd="Rscript $r_script1 $seqFile $cactus_dir $spc_int $scripts_dir"
echo "$cmd"
rcp_file=$($cmd)
echo "Recipe file: $rcp_file"
[[ -f "$rcp_file" ]] || { echo "Error: Recipe file not found."; exit 1; }

# # Rescaffold assembly with Ragout
# # Load Python module and Cactus virtualenv
# module purge
# $load_cactus_mods
# source_file "$cactus_env"
# # Load Ragout conda env
# conda activate ragout
# echo "Ragout version: $(ragout --version)"
# # Run Ragout
# if [[ -f "$rcp_file" ]]
# then
#   echo "Using recipe file $rcp_file"
# else
#   echo "Error: recipe file ($rcp_file) not found."
# fi
# cmd="ragout --solid-scaffolds --refine -s maf -t $SLURM_CPUS_PER_TASK -o $ragout_dir $rcp_file"
# echo "$cmd"
# $cmd
# # Clear env
# conda deactivate
# deactivate
# module purge

# # Index Ragout output FASTA files
# mapfile -t fastas < <(ls "${ragout_dir}"/*.fasta)
# conda activate samtools
# samtools --version | head -n1
# # Index assemblies
# for fasta in "${fastas[@]}"
# do
#     if [[ -f "${fasta}.fai" ]]
#     then
#         echo "Found file ${fasta}.fai, skipping samtools faidx step."
#     else
#         cmd="samtools faidx $fasta"
#         echo "$cmd"
#         $cmd
#     fi
# done
# conda deactivate


# # Anaylze Ragout scaffolds with R
# # Load R modules
# module purge
# $load_R_mods
# # Run Rscript
# cmd="Rscript $r_script2 $seqFile $ragout_dir $spc_int $scripts_dir"
# echo "$cmd"
# # $cmd


