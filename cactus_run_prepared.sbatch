#!/bin/bash
#SBATCH -J cactus_run_prepared
#SBATCH -p shared
#SBATCH --mem=50mb
#SBATCH --time=00:30:00
#SBATCH -o %x.log

# Initialize script
init="/home1/kdeweese/scripts/s-latissima-genome/script_init.sh"
if [[ -a "$init" ]]; then source "$init"; else { echo "Init err"; exit 1; }; fi

# Script environment variables
js="cactus_prepare_steps_jobstore"
outdir="cactus-steps-output"
sbatch_list_file="cactus_sbatch_list.txt"
logdir="cactus-logs"
# Locate $sbatch_list_file in $scripts_dir, if directory exists
sbatch_list_file="${scripts_dir}${sbatch_list_file}"

# Help message
if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]
then
  echo "\
Runs commands for Cactus alignment of multiple genomes generated by
cactus-prepare using cactus_prepare.sbatch.
Usage: sbatch ${job_name}.sbatch [sbatch_list_file]

Optional input:
  sbatch_list_file  Output of cactus_prepare.sbatch containing ordered list of 
                    paths to SBATCH files to be run sequentially
                    (default filename '$sbatch_list_file')

Output:
  ${js}/ (jobstore for intermediate Cactus files)
  ${outdir}/ (contains HAL alignment file to be used in downstream analysis)

Requires:
 - virtualenv (https://virtualenv.pypa.io/en/latest)
 - Toil (https://toil.readthedocs.io/en/latest)
 - Cactus (https://github.com/ComparativeGenomicsToolkit/cactus)"
  exit 0
fi

# Load Python module and Cactus virtualenv
module purge
module load gcc/12.3.0 python/3.11.4 git/2.42.0 py-pip/23.0
env_path="/home1/kdeweese/bin/cactus-bin-v2.6.7/cactus_env/bin/activate"
if [[ -a "$env_path" ]]
then
  source "$env_path"
else
  echo "Error on source of $env_path"
  exit 1
fi

# Define functions
# Function to check given logfile for prior successful run
check_prior () {
    local ok_mess="Successfully deleted the job store"
    # If already run, take old job ID
    if [[ -f "$1" ]] && grep -q "$ok_mess" "$1"
    then
      local id
      id="$(grep "SLURM_JOB_ID" "$logfile" | sed 's/SLURM_JOB_ID = //g')"
      echo "$id"
    else
      echo "no_id"
    fi
}
# Function to write sbatch command
submit () {
    local part
    local cmd
    part="$SLURM_JOB_PARTITION"
    # Handle runs started from head node
    if [[ -z "$part" ]]
    then
      part="shared"
    fi
    # Choose larger partition for BLAST and alignment jobs
    if echo "$*" | grep -q "blast\|align"
    then 
      part="meb_largemem"
    fi
    cmd="sbatch --parsable -p $part $*"
    echo "$cmd"
}

# Input list of SBATCH files to submit
# Take file from positional argument, if given
if [[ "$#" -eq 1 ]]
then
    echo "Looking for given file $1"
    sbatch_list_file="$1"
fi
# Verify list exists
if [[ -f "$sbatch_list_file" ]]
then
  echo "Found file: $sbatch_list_file"
else
  echo "Error: file $sbatch_list_file not found."
  exit 1
fi
echo "Parsing list of SBATCH file paths in $sbatch_list_file"
mapfile -t sbatch_list < <(cat "$sbatch_list_file")
# Run Cactus step-by-step with dependent SLURM jobs
for i in "${!sbatch_list[@]}"
do
    sfile="${sbatch_list[i]}"
    echo "Step: $sfile"
    cmd_name="$(basename "${sfile%%.sbatch}")"
    logfile="$logdir/${cmd_name}.log"
    # Check if job has already run successfully
    oldid="$(check_prior "$logfile")"
    dep="--dependency=afterok:$jobid"
    # No dependency for first job
    (( i == 0 )) && dep=""
    cmd="$(submit "$dep" "$sfile")"
    if [[ "$oldid" == "no_id" ]]
    then
      echo "$cmd"
      # Submit new job
      if ! jobid="$($cmd)"
      then
        echo "Error submitting command: $cmd"
        exit 1
      fi
    else
      # Use old successful run
      echo "Using previous successful run of ${cmd_name}: $oldid"
      jobid="$oldid"
    fi
    echo "$cmd_name job ID: $jobid"
    echo
done